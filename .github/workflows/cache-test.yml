name: Cache Timestamp Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-cache-linux:
    name: Test Cache - Ubuntu (relatime scenario)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check filesystem mount options
        run: |
          echo "## üîç Filesystem Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          mount | grep "on / type"
          mount | grep "on / type" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Create test files with relatime-compatible timestamps
        run: |
          mkdir -p test-files
          
          # Create test files
          echo "Test content 1" > test-files/file1.txt
          echo "Test content 2" > test-files/file2.txt
          echo "Test content 3" > test-files/file3.txt
          
          # Get timestamp for one week ago
          ONE_WEEK_AGO=$(date -d '7 days ago' '+%Y%m%d%H%M')
          
          echo "One week ago timestamp: $ONE_WEEK_AGO"
          
          # Set ONLY access time to one week ago (leave modification time untouched)
          touch -a -t $ONE_WEEK_AGO test-files/file1.txt
          touch -a -t $ONE_WEEK_AGO test-files/file2.txt
          touch -a -t $ONE_WEEK_AGO test-files/file3.txt
          
          echo "Access times set to one week ago for all files (modification times untouched)"

      - name: Touch file2.txt to update access time (relatime test)
        run: |
          echo "Touching file2.txt to update its access time..."
          # This simulates reading the file, which should update atime with relatime
          # since the current atime is more than 24h in the past
          touch -a test-files/file2.txt
          echo "file2.txt touched - access time should now be updated to current time"
          
          # Wait a moment and capture the timestamp
          sleep 1
          FIRST_TOUCH=$(stat -c '%x' test-files/file2.txt)
          echo "First touch atime: $FIRST_TOUCH"
          
          # Wait a bit more and touch again to see if relatime prevents the update
          sleep 2
          echo "Touching file2.txt again (testing relatime behavior)..."
          touch -a test-files/file2.txt
          
          SECOND_TOUCH=$(stat -c '%x' test-files/file2.txt)
          echo "Second touch atime: $SECOND_TOUCH"
          
          if [ "$FIRST_TOUCH" = "$SECOND_TOUCH" ]; then
            echo "‚ö†Ô∏è RELATIME BEHAVIOR: Access time NOT updated on second touch (less than 24h difference)"
          else
            echo "‚úÖ Access time WAS updated on second touch"
          fi

      - name: Capture timestamps BEFORE caching
        id: before
        run: |
          echo "## üìä Ubuntu - Before Caching (relatime scenario)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scenario**: Files created normally (mtime = now), but access times set to 1 week ago." >> $GITHUB_STEP_SUMMARY
          echo "Then \`file2.txt\` was touched to update its access time to current time (testing relatime behavior)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Modification Time | Access Time | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for file in test-files/*.txt; do
            filename=$(basename "$file")
            mod_time=$(stat -c '%y' "$file" 2>/dev/null | cut -d'.' -f1)
            access_time=$(stat -c '%x' "$file" 2>/dev/null | cut -d'.' -f1)
            
            status="Untouched"
            if [ "$filename" = "file2.txt" ]; then
              status="**Touched**"
            fi
            
            echo "| \`$filename\` | $mod_time | $access_time | $status |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Save files to cache
        uses: actions/cache/save@v4
        with:
          path: test-files
          key: cache-test-linux-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Remove files to simulate fresh restore
        run: rm -rf test-files

      - name: Restore files from cache
        uses: actions/cache/restore@v4
        with:
          path: test-files
          key: cache-test-linux-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Capture timestamps AFTER cache restore
        id: after
        run: |
          echo "## üì• Ubuntu - After Cache Restore" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Modification Time | Access Time | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for file in test-files/*.txt; do
            filename=$(basename "$file")
            mod_time=$(stat -c '%y' "$file" 2>/dev/null | cut -d'.' -f1)
            access_time=$(stat -c '%x' "$file" 2>/dev/null | cut -d'.' -f1)
            
            status="Untouched"
            if [ "$filename" = "file2.txt" ]; then
              status="**Touched**"
            fi
            
            echo "| \`$filename\` | $mod_time | $access_time | $status |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test relatime behavior after restore
        run: |
          echo "## üß™ Relatime Behavior Test (After Restore)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Testing if touching a file twice in quick succession updates atime with relatime..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Touch file1.txt and capture timestamp
          touch -a test-files/file1.txt
          sleep 1
          FIRST_TOUCH=$(stat -c '%x' test-files/file1.txt)
          
          # Touch again after a short delay
          sleep 2
          touch -a test-files/file1.txt
          SECOND_TOUCH=$(stat -c '%x' test-files/file1.txt)
          
          echo "| Test | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| First touch time | \`$FIRST_TOUCH\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Second touch time (3s later) | \`$SECOND_TOUCH\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FIRST_TOUCH" = "$SECOND_TOUCH" ]; then
            echo "| **Behavior** | ‚ö†Ô∏è **RELATIME ACTIVE**: atime NOT updated (< 24h since last update) |" >> $GITHUB_STEP_SUMMARY
            echo "| **Implication** | Setting atime back 1 week IS necessary for your caching plugin |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Behavior** | ‚úÖ atime WAS updated on second touch |" >> $GITHUB_STEP_SUMMARY
            echo "| **Implication** | Setting atime back 1 week may NOT be necessary |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üî¨ Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Expected behavior:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`file1.txt\` and \`file3.txt\`: mtime recent (when created), atime ~1 week ago" >> $GITHUB_STEP_SUMMARY
          echo "- \`file2.txt\`: mtime recent (when created), atime recent (when touched)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Key question:** Does \`actions/cache\` preserve the access time differential?" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  test-cache-macos:
    name: Test Cache - macOS (relatime scenario)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check filesystem mount options
        run: |
          echo "## üîç Filesystem Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          mount | grep "on / "
          mount | grep "on / " >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Create test files with relatime-compatible timestamps
        run: |
          mkdir -p test-files
          
          # Create test files
          echo "Test content 1" > test-files/file1.txt
          echo "Test content 2" > test-files/file2.txt
          echo "Test content 3" > test-files/file3.txt
          
          # Get timestamp for one week ago
          ONE_WEEK_AGO=$(date -v-7d '+%Y%m%d%H%M')
          
          echo "One week ago timestamp: $ONE_WEEK_AGO"
          
          # Set ONLY access time to one week ago (leave modification time untouched)
          touch -a -t $ONE_WEEK_AGO test-files/file1.txt
          touch -a -t $ONE_WEEK_AGO test-files/file2.txt
          touch -a -t $ONE_WEEK_AGO test-files/file3.txt
          
          echo "Access times set to one week ago for all files (modification times untouched)"

      - name: Touch file2.txt to update access time
        run: |
          echo "Touching file2.txt to update its access time..."
          touch -a test-files/file2.txt
          echo "file2.txt touched - access time should now be updated to current time"

      - name: Capture timestamps BEFORE caching
        id: before
        run: |
          echo "## üìä macOS - Before Caching (relatime scenario)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scenario**: Files created normally (mtime = now), access times set to 1 week ago, then \`file2.txt\` touched." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Modification Time | Access Time | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for file in test-files/*.txt; do
            filename=$(basename "$file")
            mod_time=$(stat -f '%Sm' -t '%Y-%m-%d %H:%M:%S' "$file")
            access_time=$(stat -f '%Sa' -t '%Y-%m-%d %H:%M:%S' "$file")
            
            status="Untouched"
            if [ "$filename" = "file2.txt" ]; then
              status="**Touched**"
            fi
            
            echo "| \`$filename\` | $mod_time | $access_time | $status |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Save files to cache
        uses: actions/cache/save@v4
        with:
          path: test-files
          key: cache-test-macos-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Remove files to simulate fresh restore
        run: rm -rf test-files

      - name: Restore files from cache
        uses: actions/cache/restore@v4
        with:
          path: test-files
          key: cache-test-macos-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Capture timestamps AFTER cache restore
        id: after
        run: |
          echo "## üì• macOS - After Cache Restore" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Modification Time | Access Time | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for file in test-files/*.txt; do
            filename=$(basename "$file")
            mod_time=$(stat -f '%Sm' -t '%Y-%m-%d %H:%M:%S' "$file")
            access_time=$(stat -f '%Sa' -t '%Y-%m-%d %H:%M:%S' "$file")
            
            status="Untouched"
            if [ "$filename" = "file2.txt" ]; then
              status="**Touched**"
            fi
            
            echo "| \`$filename\` | $mod_time | $access_time | $status |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

  test-cache-windows:
    name: Test Cache - Windows (relatime scenario)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test files with relatime-compatible timestamps
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path test-files
          
          # Create test files
          "Test content 1" | Out-File -FilePath test-files/file1.txt -Encoding utf8
          "Test content 2" | Out-File -FilePath test-files/file2.txt -Encoding utf8
          "Test content 3" | Out-File -FilePath test-files/file3.txt -Encoding utf8
          
          # Set timestamp for one week ago
          $oneWeekAgo = (Get-Date).AddDays(-7)
          
          Write-Host "One week ago timestamp: $oneWeekAgo"
          
          # Set ONLY LastAccessTime to one week ago (leave LastWriteTime/modification time untouched)
          (Get-Item test-files/file1.txt).LastAccessTime = $oneWeekAgo
          (Get-Item test-files/file2.txt).LastAccessTime = $oneWeekAgo
          (Get-Item test-files/file3.txt).LastAccessTime = $oneWeekAgo
          
          Write-Host "Access times set to one week ago for all files (modification times untouched)"

      - name: Touch file2.txt to update access time
        shell: pwsh
        run: |
          Write-Host "Touching file2.txt to update its access time..."
          (Get-Item test-files/file2.txt).LastAccessTime = Get-Date
          Write-Host "file2.txt touched - access time should now be updated to current time"

      - name: Capture timestamps BEFORE caching
        id: before
        shell: pwsh
        run: |
          "## üìä Windows - Before Caching (relatime scenario)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "**Scenario**: Files created normally (mtime = now), access times set to 1 week ago, then ``file2.txt`` touched." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "| File | Modification Time | Access Time | Status |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "|------|-------------------|-------------|--------|" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          
          Get-ChildItem test-files/*.txt | ForEach-Object {
            $filename = $_.Name
            $modTime = $_.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
            $accessTime = $_.LastAccessTime.ToString("yyyy-MM-dd HH:mm:ss")
            
            $status = "Untouched"
            if ($filename -eq "file2.txt") {
              $status = "**Touched**"
            }
            
            "| ``$filename`` | $modTime | $accessTime | $status |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          }
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Save files to cache
        uses: actions/cache/save@v4
        with:
          path: test-files
          key: cache-test-windows-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Remove files to simulate fresh restore
        shell: pwsh
        run: Remove-Item -Recurse -Force test-files

      - name: Restore files from cache
        uses: actions/cache/restore@v4
        with:
          path: test-files
          key: cache-test-windows-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Capture timestamps AFTER cache restore
        id: after
        shell: pwsh
        run: |
          "## üì• Windows - After Cache Restore" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "| File | Modification Time | Access Time | Status |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          "|------|-------------------|-------------|--------|" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          
          Get-ChildItem test-files/*.txt | ForEach-Object {
            $filename = $_.Name
            $modTime = $_.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
            $accessTime = $_.LastAccessTime.ToString("yyyy-MM-dd HH:mm:ss")
            
            $status = "Untouched"
            if ($filename -eq "file2.txt") {
              $status = "**Touched**"
            }
            
            "| ``$filename`` | $modTime | $accessTime | $status |" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          }
          "" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

  summary:
    name: Generate Summary
    runs-on: ubuntu-latest
    needs: [test-cache-linux, test-cache-macos, test-cache-windows]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "# üéØ Cache Timestamp Preservation Test Results (relatime scenario)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow tests whether \`actions/cache\` preserves file timestamps, specifically focusing on the **relatime** filesystem behavior." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Scenario" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Create 3 files (\`file1.txt\`, \`file2.txt\`, \`file3.txt\`) - modification time = now" >> $GITHUB_STEP_SUMMARY
          echo "2. Set **access time only** to **1 week ago** for all files (modification time left untouched)" >> $GITHUB_STEP_SUMMARY
          echo "3. **Touch \`file2.txt\`** to update only its access time to the current time" >> $GITHUB_STEP_SUMMARY
          echo "4. Cache all files using \`actions/cache\`" >> $GITHUB_STEP_SUMMARY
          echo "5. Restore from cache in a fresh job" >> $GITHUB_STEP_SUMMARY
          echo "6. Verify if the timestamp differences are preserved" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Expected Results After Cache Restore" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Expected Modification Time | Expected Access Time |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------------------------|---------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`file1.txt\` | Recent (when created) | ~1 week ago |" >> $GITHUB_STEP_SUMMARY
          echo "| \`file2.txt\` | Recent (when created) | Recent (when touched) |" >> $GITHUB_STEP_SUMMARY
          echo "| \`file3.txt\` | Recent (when created) | ~1 week ago |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìù Why This Matters for relatime" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "On Linux filesystems mounted with \`relatime\` (the default), the access time is only updated if:" >> $GITHUB_STEP_SUMMARY
          echo "- The previous access time was earlier than the modification time, OR" >> $GITHUB_STEP_SUMMARY
          echo "- The previous access time is more than 24 hours old" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "By setting files to 1 week old and then touching one, we can verify:" >> $GITHUB_STEP_SUMMARY
          echo "1. Whether old access times are preserved through caching" >> $GITHUB_STEP_SUMMARY
          echo "2. Whether the differential between files (touched vs untouched) is maintained" >> $GITHUB_STEP_SUMMARY
          echo "3. If your caching plugin will correctly handle relatime-aware workflows" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the individual job summaries above to see the actual before/after timestamps for each OS." >> $GITHUB_STEP_SUMMARY
